# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Define the stock symbol and date range
stock_symbol = "AAPL"
start_date = "2010-01-01"
end_date = "2021-09-01"

# Fetch historical stock price data from Yahoo Finance
df = yf.download(stock_symbol, start=start_date, end=end_date)

# Select the 'Close' price for prediction
data = df['Close'].values.reshape(-1, 1)

# Normalize the data
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

# Define the training and testing data
train_size = int(len(data) * 0.8)
train_data = data[:train_size]
test_data = data[train_size:]

# Prepare data for training
def create_dataset(dataset, time_step=1):
    X, Y = [], []
    for i in range(len(dataset) - time_step - 1):
        a = dataset[i:(i + time_step), 0]
        X.append(a)
        Y.append(dataset[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 100
X_train, Y_train = create_dataset(train_data, time_step)
X_test, Y_test = create_dataset(test_data, time_step)

# Reshape the data for LSTM
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50, return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100, batch_size=64)

# Predict the stock prices
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform the data to get original prices
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

# Plot the results
plt.figure(figsize=(16, 8))
plt.plot(df.index[time_step:train_size], train_predict, label='Train Predictions', color='blue')
plt.plot(df.index[train_size+time_step+1:], test_predict, label='Test Predictions', color='red')
plt.plot(df.index[time_step:train_size], df['Close'][time_step:train_size], label='Actual Train Prices', color='green')
plt.plot(df.index[train_size+time_step+1:], df['Close'][train_size+time_step+1:], label='Actual Test Prices', color='magenta')
plt.legend()
plt.show()
